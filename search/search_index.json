{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yummy Game Server","text":"<p>Yummy is the multiplayer game engine to make it easier to develop game. Supports websocket communication to give wider range of the platform. Web, Android, Ios, desktop and all modern browser have inbuild websocket support and Yummy can be used almost all platforms. Our main goal of the developing this application is support game developer to make better games. Most of the time developing multiplayer games are more complicated than the single player games and with Yummy some of the difficulties can be solved more easier.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Custom user metadata</li> <li>Custom rooms</li> <li>Different authentication methods</li> <li>Supports for vertical and horizontal scaling</li> <li>Observability via OpenTelemetry integration</li> </ul>"},{"location":"#todo-list","title":"Todo list","text":"<ul> <li> Close inactive connections</li> <li> Dispose inactive rooms</li> <li> Add parameter for OpenTelemetry configuration</li> <li> Design document</li> <li> Example projects</li> <li> Friend add/remove/list integration</li> <li> RabbitMQ integration</li> <li> Protocol Buffers or FlatBuffers integration</li> <li> Create Lua scripts for Redis operations</li> <li> Server disconnect detection [Stateless]</li> <li> Web interface for system control</li> <li> Client libraries (JS, Python, Rust, Godot, Unity, etc.)</li> <li> Create websocket tester application that control multiple connections</li> <li> Create system user at startup to configure system remotely</li> <li> Support for pre and post API calls</li> <li> Room metadata</li> <li> Python runtimes</li> <li> Multiple room support for user</li> <li> Room join request</li> <li> Ban and kick from room</li> <li> Redis integration</li> <li> TLS support</li> <li> Remove room at redis state when no user in the room</li> <li> Remove all unnecessary copy and clone</li> </ul>"},{"location":"#general-unit-test","title":"General Unit Test","text":"<ul> <li> Room integration</li> <li> Multiple server communication</li> <li> Integration test</li> </ul>"},{"location":"code-coverage/","title":"Code coverage","text":"<p>Code coverage requires additional setup and has been tested on Os X system only. So there is no guarantee that it will work on linux or windows systems.</p> <p>grcov is used to do coverage and need to install.</p> <p>To generate code coverage result</p> <pre><code>RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='cargo-normal-%p-%m.profraw' cargo test --all\nRUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='cargo-stateless-%p-%m.profraw' cargo test --all --features stateless\n\ngrcov . \\\n--binary-path ./target/debug/deps/ \\\n--source-dir . \\\n--excl-start 'mod test* \\{' \\\n--ignore 'tests/*' \\\n--ignore 'test/*' \\\n--ignore server/src/main.rs \\\n--ignore server/src/api/websocket/client.rs \\\n--ignore general/src/client.rs \\\n--ignore \"*test.rs\" \\\n--ignore \"*tests.rs\" \\\n--ignore \"*github.com*\" \\\n--ignore \"*libcore*\" \\\n--ignore \"*rustc*\" \\\n--ignore \"*liballoc*\" \\\n--ignore \"*cargo*\" \\\n-t html \\\n-o html\n\nfind . -name \"*.profraw\" -type f -delete\n</code></pre> <p>After executing commands, it will generate html folder and that include code coverage results. The current results shows that code coverage is more than 85%.</p>"},{"location":"connection/","title":"Connection","text":"<p>Yummy is designed to communicate over WebSocket. Almost all modern programming languages has a Websocket support so it should not be a problem to connect. Also, all modern browsers has a Websocket support and that makes Yummy to accesible from browsers.</p> <p>URI syntax for without TLS</p> <pre><code>ws://127.0.0.1:9090/v1/socket?x-yummy-api=YummyYummy\n</code></pre> <p>URI syntax for with TLS</p> <pre><code>wss://127.0.0.1:9090/v1/socket?x-yummy-api=YummyYummy\n</code></pre> <p>Please check configuration parameters to personalize it.</p> <p><code>BIND_IP</code> </p> <p><code>BIND_PORT</code> </p> <p><code>API_KEY_NAME</code> </p> <p><code>INTEGRATION_KEY</code> </p> <p> Environtment variables</p> <p>Yummy will not sent any message when the client connected. The system wait message from client and give response as a result.</p>"},{"location":"connection/#example-usages","title":"Example usages","text":"<p>Basic authentication example (Javascript)</p> <pre><code>if (\"WebSocket\" in window) {\nalert(\"WebSocket is supported by your Browser!\");\n// Let us open a web socket\nvar ws = new WebSocket(\"ws://127.0.0.1:9090/v1/socket?x-yummy-api=YummyYummy\");\nws.onopen = function() {\nws.send(JSON.stringify({\n\"type\": \"Auth\",\n\"auth_type\": \"Email\",\n\"email\": \"test@test.com\",\n\"password\": \"test\",\n\"create\": true\n}));\n};\nws.onmessage = function(evt) {\nalert(evt.data);\n};\nws.onclose = function() {\nalert(\"Connection is closed...\");\n};\n} else {\nalert(\"WebSocket NOT supported by your Browser!\");\n}\n</code></pre>"},{"location":"env-variables/","title":"Environment variables","text":"<p>Yummy has multiple configuration over environtment variable. Those configurations can be passed via environtment or via config file. The config file must be located near the executable.</p> Profile File name Production  prod.env Development  dev.env Test  test.env"},{"location":"env-variables/#parameters","title":"Parameters","text":""},{"location":"env-variables/#server_name","title":"<code>SERVER_NAME</code>","text":"<p>The system generates a random name at the startup. The name will start with YUMMY and continue with 7 alphanumeric characters. This name will be used to communicate between Yummy instances and shorter names can improve performance. Example names: YUMMY-wvO8T0u, YUMMY-NTXBzdo, YUMMY-oSArCvq.  Default: <code>Server name randomly generated.</code> </p>"},{"location":"env-variables/#bind_ip","title":"<code>BIND_IP</code>","text":"<p>Instance's binding ip address.  Default: <code>0.0.0.0</code> </p>"},{"location":"env-variables/#bind_port","title":"<code>BIND_PORT</code>","text":"<p>Instance's binding port address.  Default: <code>9090</code> </p>"},{"location":"env-variables/#tls_cert_path","title":"<code>TLS_CERT_PATH</code>","text":"<p>TLS certificates cert file path.  Default:  </p>"},{"location":"env-variables/#tls_key_path","title":"<code>TLS_KEY_PATH</code>","text":"<p>TLS certificates key file path.  Default:  </p>"},{"location":"env-variables/#rust_log","title":"<code>RUST_LOG</code>","text":"<p>Rust Programming Language's and Actix Framework's logging configuration.  Rust logging information Default: <code>debug,backend,actix_web=debug</code> </p>"},{"location":"env-variables/#heartbeat_interval","title":"<code>HEARTBEAT_INTERVAL</code>","text":"<p>Heartbeat message sent interval. This parameter is in seconds.  Default: <code>10</code> </p>"},{"location":"env-variables/#cache_duration","title":"`CACHE_DURATION","text":"<p>Idle time of cache entry. The timer will be refreshed on every access the entry. This parameter is in seconds.  Default: <code>300</code> </p>"},{"location":"env-variables/#heartbeat_timeout","title":"<code>HEARTBEAT_TIMEOUT</code>","text":"<p>Maximum wait time after receiving the last heartbeat message. The connection termination procedure will be started if the system cannot receive a heartbeat message in time. This parameter is in seconds.  Default: <code>20</code> </p>"},{"location":"env-variables/#connection_restore_wait_timeout","title":"<code>CONNECTION_RESTORE_WAIT_TIMEOUT</code>","text":"<p>If the client disconnected from the instance, the system wait some amound of time to informatim other users and update clients states. This time starts at after user disconnect from the instance or hit to HEARTBEAT_TIMEOUT. This parameter is in seconds.  Default: <code>10</code> </p>"},{"location":"env-variables/#token_lifetime","title":"<code>TOKEN_LIFETIME</code>","text":"<p>JWT lifetime. That parameter used for session and connection restoration. This parameter is in milliseconds.  Default: <code>86400</code> </p>"},{"location":"env-variables/#api_key_name","title":"<code>API_KEY_NAME</code>","text":"<p>Websocket's HTTP GET parameter name.  Default: <code>x-yummy-api</code> </p>"},{"location":"env-variables/#integration_key","title":"<code>INTEGRATION_KEY</code>","text":"<p>Websocket's integration key to communicate.  Default: <code>YummyYummy</code> </p>"},{"location":"env-variables/#salt_key","title":"<code>SALT_KEY</code>","text":"<p>Secret key for JWT.  Default: <code>YUMMY-SALT</code> </p>"},{"location":"env-variables/#max_user_meta","title":"<code>MAX_USER_META</code>","text":"<p>Maximum allowed meta informations per users.  Default: <code>10</code> </p>"},{"location":"env-variables/#default_max_room_meta","title":"<code>DEFAULT_MAX_ROOM_META</code>","text":"<p>Maximum allowed meta informations per room.  Default: <code>10</code> </p>"},{"location":"env-variables/#room_password_charset","title":"<code>ROOM_PASSWORD_CHARSET</code>","text":"<p>Automatic generated room password's charset.  Default: <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code> </p>"},{"location":"env-variables/#room_password_length","title":"<code>ROOM_PASSWORD_LENGTH</code>","text":"<p>Automatic generated room password's length.  Default: <code>4</code> </p>"},{"location":"env-variables/#database_path","title":"<code>DATABASE_PATH</code>","text":"<p>Sqlite database path.  Default: <code>yummy.db</code> </p>"},{"location":"env-variables/#redis_url","title":"<code>REDIS_URL</code>","text":"<p>Redis connection information.  Default: <code>redis://127.0.0.1/</code> </p>"},{"location":"env-variables/#redis_prefix","title":"<code>REDIS_PREFIX</code>","text":"<p>Prefix for all Redis keys.  Default:  </p>"},{"location":"file-format/","title":"File format","text":"<p>Rust file format is looks like this: <pre><code>/* **************************************************************************************************************** */\n/* **************************************************** MODS ****************************************************** */\n/* *************************************************** IMPORTS **************************************************** */\n/* ******************************************** STATICS/CONSTS/TYPES ********************************************** */\n/* **************************************************** MACROS **************************************************** */\n/* *************************************************** STRUCTS **************************************************** */\n/* **************************************************** ENUMS ***************************************************** */\n/* ************************************************** FUNCTIONS *************************************************** */\n/* *************************************************** TRAITS ***************************************************** */\n/* ************************************************* IMPLEMENTS *************************************************** */\n/* ********************************************** TRAIT IMPLEMENTS ************************************************ */\n/* ************************************************* MACROS CALL ************************************************** */\n/* ************************************************** UNIT TESTS ************************************************** */\n/* **************************************************************************************************************** */\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>Yummy Game Engine is developed with the Rust Programming Language. The system save all user, room and informations locally at Sqlite database. Also, the Redis used for caching informations based on build parameters.</p> <p>If you want to start Yummy application locally please execute the following command:</p> <p>To start Yummy application</p> <pre><code>cargo run --release\n</code></pre> <p>The application has multiple parameters to configure. All these configuration parameters can be found in the link.</p> <p>Also, there are <code>stateless</code> definition to use Redis server as a cache manager.</p> <p>To start Yummy application with stateless mode</p> <pre><code>cargo run --release --features stateless\n</code></pre> <p>When Yummy starts, you will see messages like this on the console.</p> <pre><code>2023-01-01T17:30:35.039755Z  INFO server: Yummy is starting...    2023-01-01T17:30:35.039809Z  INFO server: Binding at   \"0.0.0.0:9090\"    2023-01-01T17:30:35.039824Z  INFO server: Server name  \"YUMMY-BRaNf5T\"    2023-01-01T17:30:35.039841Z  INFO server: Log level is \"debug,backend,actix_web=debug\"    2023-01-01T17:30:35.042950Z  INFO actix_server::builder: Starting 4 workers\n2023-01-01T17:30:35.043081Z  INFO actix_server::server: Actix runtime found; starting in Actix runtime\n</code></pre> <p>For now, we don't have a support Docker yet. It will come with future releases.</p>"},{"location":"unit-test/","title":"Unit test executions","text":"<p>To execute all unit test, need to execute following commands. The second command requires Redis instance.</p> <p>Execute</p> <pre><code>cargo test --all\ncargo test --all  --features stateless\n</code></pre>"},{"location":"message/auth/","title":"Authentication related messages","text":""},{"location":"message/auth/#authenticate-via-email","title":"Authenticate via email","text":"Request message Response message Field name Type Required Description Default value <code>type</code> string Y Value must be AuthEmail <code>email</code> string Y Authentication email address <code>password</code> string Y Authentication password <code>create</code> boolean N If the user is not created yet, create new one false <p>Example request: <pre><code>{\n\"type\": \"AuthEmail\",\n\"email\": \"erhanbaris@gmail.com\",\n\"password\": \"erhan\",\n\"create\": true\n}\n</code></pre></p> <p>Please check Authenticate response message</p>"},{"location":"message/auth/#authenticate-via-device-id","title":"Authenticate via device id","text":"Request message Response message Field name Type Required Description <code>type</code> string Y Value must be AuthDeviceId <code>id</code> string Y Authentication device id <p>Example request: <pre><code>{\n\"type\": \"AuthDeviceId\",\n\"id\": \"1234567890\"\n}\n</code></pre></p> <p>Please check Authenticate response message</p>"},{"location":"message/auth/#authenticate-via-custom-id","title":"Authenticate via custom id","text":"Request message Response message Field name Type Required Description <code>type</code> string Y Value must be AuthCustomId <code>id</code> string Y Authentication device id <p>Example request: <pre><code>{\n\"type\": \"AuthCustomId\",\n\"id\": \"ABV123\"\n}\n</code></pre></p> <p>Please check Authenticate response message</p>"},{"location":"message/auth/#refreshing-token","title":"Refreshing token","text":"<p>Regenerating token with new expire date.</p>  Request message Response message Field name Type Required Description <code>type</code> string Y Value must be RefreshToken <code>token</code> string Y Valid Authentication token <p>Example request: <pre><code>{\n\"type\": \"RefreshToken\",\n\"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NzA1Mjg3MTEsInVzZXIiOnsiaWQiOiJiMDhkN2I3OS0xNDA1LTQxZGMtODJhMS02YTg4MjU3OWM3MmEiLCJzZXNzaW9uIjoiM2IxMzdjYWUtZmY1OC00NjY5LTg1YjctOWEyM2NiOGRiYzAxIiwibmFtZSI6bnVsbCwiZW1haWwiOiJlcmhhbmJhcmlzQGdtYWlsLmNvbSJ9fQ.6tLnsjWPRCz0cW00j2nzV-SUk6GwrlYgxe9V_p5mhxU\"\n}\n</code></pre></p> <p>Please check Authenticate response message</p>"},{"location":"message/auth/#restoring-session","title":"Restoring session","text":"<p>The user should be restore token after reconnecting to the system. If timeout exceeded, the session will be terminated and active game and player will be informed.</p>  Request message Response message Field name Type Required Description <code>type</code> string Y Value must be RestoreToken <code>token</code> string Y Valid Authentication token <p>Example request: <pre><code>{\n\"type\": \"RestoreToken\",\n\"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NzA1Mjg3MTEsInVzZXIiOnsiaWQiOiJiMDhkN2I3OS0xNDA1LTQxZGMtODJhMS02YTg4MjU3OWM3MmEiLCJzZXNzaW9uIjoiM2IxMzdjYWUtZmY1OC00NjY5LTg1YjctOWEyM2NiOGRiYzAxIiwibmFtZSI6bnVsbCwiZW1haWwiOiJlcmhhbmJhcmlzQGdtYWlsLmNvbSJ9fQ.6tLnsjWPRCz0cW00j2nzV-SUk6GwrlYgxe9V_p5mhxU\"\n}\n</code></pre></p> <p>Please check Authenticate response message</p>"},{"location":"message/auth/#logout","title":"Logout","text":"<p>Terminates the current session and active game and player will be informed.</p>  Request message Response message Field name Type Required Description <code>type</code> string Y Value must be Logout <p>Example request: <pre><code>{\n\"type\": \"Logout\"\n}\n</code></pre></p>  Success Fail Field name Type Nullable Description <code>status</code> boolean N Value should be true <p>Example response: <pre><code>{\n\"status\": true\n}\n</code></pre></p> Field name Type Nullable Description <code>status</code> boolean N Value should be false <code>error</code> string N Error message <p>Example response: <pre><code>{\n\"status\": false,\n\"error\": \"User not logged in\"\n}\n</code></pre></p>"},{"location":"message/auth/#authenticate-response-message","title":"Authenticate response message","text":"<p>All authentication response message structure is the same.</p>  Success Fail Field name Type Nullable Description <code>status</code> boolean N Value should be true <code>type</code> string N Value should be Authenticated <code>token</code> string N User's authentication token <p>Example response:</p> <pre><code>{\n\"status\": true,\n\"type\": \"Authenticated\",\n\"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NzI3NzE2NTQsInVzZXIiOnsiaWQiOiJiMDhkN2I3OS0xNDA1LTQxZGMtODJhMS02YTg4MjU3OWM3MmEiLCJzZXNzaW9uIjoiZWJiNWNkNzctM2M2Ni00NTQ2LTk2OGQtYTNjOGMwNTBiMjczIiwibmFtZSI6bnVsbCwiZW1haWwiOiJlcmhhbmJhcmlzQGdtYWlsLmNvbSIsInVzZXJfdHlwZSI6MX19.k2eM1xV4XnUx33f0pBVUD_lLgIcw0K1l2DOpJueG7g8\"\n}\n</code></pre> Field name Type Nullable Description <code>status</code> boolean N Value should be false <code>error</code> string N Error message <p>Example response:</p> <pre><code>{\n\"status\": false,\n\"error\": \"Email and/or password not valid\"\n}\n</code></pre>"},{"location":"message/general-objects/","title":"General objects","text":""},{"location":"message/general-objects/#meta","title":"Meta","text":"<p>This area is used to store private or public information. Information can be kept dynamically and access to this information can be arranged. However, only certain data types are supported. number, boolean, string and list(array) types are supported. nested declaration and array are not supported. It must be defined as a key-value. Value part may contain a value or if it is desired to determine the authorization level, it should be defined as an object and authorization information should be given. Access level of all created meta is defined as 0.</p> <p>When the query is made, meta information that has been assigned a lower authority than the user/room's authority can also be seen. In other words, if the user/room has the moderator authority, they can see all the metas with Anonymous, Registered user, Friend, Me and Moderator privileges.</p> <p>If the null is assigned into the key, that key will be removed from room.</p> <p> See the access level table.</p> <p>Examples</p> Single definitionMultiple definitionDefinition with access levelRemove meta from user <pre><code>{\n\"location\": \"Copenhagen\"\n}\n</code></pre> <pre><code>{\n\"location\": \"Copenhagen\",\n\"age\": 18,\n\"maried\": true\n}\n</code></pre> <pre><code>{\n\"location\": {\n\"access\": 4,\n\"value\": \"Copenhagen\"\n},\n\"age\": 18,\n\"maried\": true\n}\n</code></pre> <pre><code>{\n\"location\": null\n}\n</code></pre>"},{"location":"message/general-objects/#meta-access-level","title":"Meta access level","text":"Value Information <code>0</code> Anonymous <code>1</code> Registered user <code>2</code> Friend <code>3</code> Me <code>4</code> Moderator <code>5</code> Admin <code>6</code> System"},{"location":"message/general-objects/#meta-actions","title":"Meta actions","text":"<p>It is the choice of algorithm to be used to add or delete new meta.</p> Value Information <code>0</code> Only add new item or update <code>1</code> Add new item or update then remove unused metas <code>2</code> Remove all metas. Note: new meta definitions will be discarded"},{"location":"message/room/","title":"Room related messages","text":""},{"location":"message/room/#create-room","title":"Create room","text":"Request message Response message Field name Type Required Description <code>type</code> string Y Value must be CreateRoom <code>join_request</code> boolean N User need an approvement from moderator or admin to join the room. Default: false <code>name</code> string N Room name <code>description</code> string N Room description <code>access_type</code> AccessType N Definition for who can access and see the room. Default: 0 <code>max_user</code> number N Maximum number for participants. Use 0 for unlimited participants. Default:  0 <code>tags</code> [string] N Array of tag. <code>metas</code> [Meta] N Array of Meta information. This is room based information and have access level to whom see that information. <p>Example requests:</p> Example 1Example 2 <pre><code>{\n\"type\": \"CreateRoom\",\n\"access_type\": 1,\n\"max_user\": 1,\n\"metas\": {\n\"min-score\": 5000,\n\"country\": \"DK\"\n}\n}\n</code></pre> <pre><code>{\n\"type\": \"CreateRoom\",\n\"tags\": [\"test 1\", \"test 2\", \"test 3\"]\n}\n</code></pre>  Success Fail Field name Type Nullable Description <code>status</code> boolean N Value should be true <code>type</code> string N Value must be RoomCreated <code>room_id</code> string N Room's ID <p>Example requests:</p> <pre><code>{\n\"status\": true,\n\"type\": \"CreateRoom\",\n\"room_id\": \"8e4d7516-1ee7-47d2-9387-438de3db37b9\"\n}\n</code></pre> Field name Type Nullable Description <code>status</code> boolean N Value should be false <code>error</code> string N Error message <p>Example response::</p> <pre><code>{\n\"status\": false,\n\"error\": \"User joined to other room\"\n}\n</code></pre>"},{"location":"message/room/#join-to-room","title":"Join to room","text":"<p>Joining to room require a little more attention than other parts. Room can be configurable based on the owners decitions. It means that, there are couple of parameters and based on parameters, user can be join to room directly or wait in the lobby to be accepted by room owner or moderator.</p>  Request message Response message Field name Type Required Description Default value <code>type</code> string Y Value must be JoinToRoom <code>room_id</code> string Y Room's ID <code>room_user_type</code> RoomUserType N User type at the room 1 <p>Example requests:</p> Example 1Example 2 <pre><code>{\n\"type\": \"JoinToRoom\",\n\"room_id\": \"8c366421-f7d8-47e1-8eed-82915280ce30\"\n}\n</code></pre> <pre><code>{\n\"type\": \"JoinToRoom\",\n\"room_id\": \"8c366421-f7d8-47e1-8eed-82915280ce30\",\n\"room_user_type\": 3\n}\n</code></pre>  Success Fail Field name Type Nullable Description <code>status</code> boolean N Value should be true <code>type</code> string N Value must be Joined <code>room_id</code> string N Room's ID <code>room_name</code> string Y Room's name <code>users</code> RoomUser N Array of RoomUser. <code>metas</code> [Meta] N Array of Meta information. This is room based information and have access level to whom see that information. <p>Example requests:</p> <pre><code>{\n\"status\": true,\n\"type\": \"JoinToRoom\",\n\"room_name\": null,\n\"users\": [\n{\n\"user_id\": \"bf66435f-705a-48aa-aeed-da06e5e29833\",\n\"name\": null,\n\"type\": 1\n},\n{\n\"user_id\": \"8c365226-06cd-4140-9e31-f6b9a73d6b78\",\n\"name\": null,\n\"type\": 3\n}\n]\n}\n</code></pre> Field name Type Nullable Description <code>status</code> boolean N Value should be false <code>error</code> string N Error message <p>Example response::</p> <pre><code>{\n\"status\": false,\n\"error\": \"User joined to other room\"\n}\n</code></pre>"},{"location":"message/room/#message-objects","title":"Message objects","text":""},{"location":"message/room/#accesstype","title":"AccessType","text":"<p>Who can access the room.</p> Value Meaning Information <code>0</code> Public The room can be searchable by everyone and anyone can join to room. <code>1</code> Private The room available only with the key <code>2</code> Friend Friends can see and can join to room"},{"location":"message/room/#roomusertype","title":"RoomUserType","text":"<p>User's authorization in this room</p> Value Meaning <code>1</code> User <code>2</code> Moderator <code>3</code> Owner"},{"location":"message/user/","title":"User related messages","text":""},{"location":"message/user/#get-my-information","title":"Get my information","text":"Request message Response message Field name Type Required Description <code>type</code> string Y Value must be Me <p>Example request:</p> <pre><code>{\n\"type\": \"Me\"\n}\n</code></pre> <p>Please check User information response</p>"},{"location":"message/user/#get-users-information","title":"Get user's information","text":"Request message Response message Field name Type Required Description <code>type</code> string Y Value must be GetUser <code>user_id</code> string Y User's unique id <p>Example request:</p> <pre><code>{\n\"type\": \"GetUser\",\n\"user_id\": \"258cd77c-1618-4c44-baff-6ec73c57fa85\"\n}\n</code></pre> <p>Please check User information response</p>"},{"location":"message/user/#information-update","title":"Information update","text":"<p>Update user information. Current implementation only allow to update own informations. Later on the system will have a support to update another user's informations. That is partially implemented but requires more changes and controls.</p>  Request message Response message Field name Type Nullable Description <code>type</code> string N Value must be UpdateUser <code>name</code> string Y <code>email</code> string Y <code>password</code> string Y <code>device_id</code> string Y <code>custom_id</code> string Y <code>user_type</code> UserType Y <code>metas</code> [Meta] Y Array of Meta information. This is user based information and have access level to whom see that information. <code>meta_action</code> MetaAction Y Default value is 0 <p>Example request:</p> Update all informationsOnly password changeOnly user type changeOnly user type change <pre><code>{\n\"type\": \"UpdateUser\",\n\"name\": \"erhan\",\n\"email\": \"erhanbaris@gmail.com\",\n\"password\": \"12345\",\n\"device_id\": \"abc123\",\n\"custom_id\": \"1234567890\",\n\"user_type\": 3,\n\"meta\": {\n\"lat\": 123.0,\n\"lon\": 321.0\n}\n}\n</code></pre> <pre><code>{\n\"type\": \"UpdateUser\",\n\"password\": \"12345\"\n}\n</code></pre> <pre><code>{\n\"type\": \"UpdateUser\",\n\"user_type\": 3,\n}\n</code></pre> <pre><code>{\n\"type\": \"UpdateUser\",\n\"user_type\": 3,\n}\n</code></pre> <p>Please check User information response</p>"},{"location":"message/user/#user-information-response","title":"User information response","text":"Success Fail Field name Type Nullable Description <code>status</code> boolean N Value should be true <code>type</code> string N Value should be UserInfo <code>id</code> string N User's unique id <code>name</code> string Y User's name <code>email</code> string Y Email <code>device_id</code> string Y Device id <code>custom_id</code> string Y Custom id <code>meta</code> UserMeta Y Meta object <code>user_type</code> UserType N User's type information <code>online</code> boolean N <code>insert_date</code> number N <code>last_login_date</code> number N <p>Example response: <pre><code>{\n\"status\": true,\n\"type\": \"UserInfo\",\n\"id\": \"b08d7b79-1405-41dc-82a1-6a882579c72a\",\n\"name\": null,\n\"email\": \"erhanbaris@gmail.com\",\n\"device_id\": null,\n\"custom_id\": null,\n\"meta\": null,\n\"user_type\": 1,\n\"online\": true,\n\"insert_date\": 1670062718,\n\"last_login_date\": 1672694548\n}\n</code></pre></p> Field name Type Nullable Description <code>status</code> boolean N Value should be false <code>error</code> string N Error message <p>Example response: <pre><code>{\n\"status\": false,\n\"error\": \"Email and/or password not valid\"\n}\n</code></pre></p>"},{"location":"python/auth/","title":"Auth API's","text":""},{"location":"python/auth/#auth-via-email","title":"Auth via email","text":"CodeModel details <pre><code>def pre_email_auth(model):\npass\ndef post_email_auth(model, successed):\npass\n</code></pre> Name Return Description <code>get_user_id()</code> <code>string</code> Get authenticated user id. If user not authenticated, value will be empty. <code>get_session_id()</code> <code>string</code> Get authenticated session id. If user not authenticated, value will be empty. <code>get_email()</code> <code>string</code> User's emaill address. <code>get_password()</code> <code>string</code> User's password <code>get_create()</code> <code>boolean</code> If the user not available on the system, create the user. <code>set_email(string)</code> Set user's email address. <code>set_password(string)</code> Set user's password address. <code>set_create(boolean)</code> Set create information. Please check <code>get_create</code> for more information."},{"location":"python/auth/#auth-via-device-id","title":"Auth via device id","text":"CodeModel details <pre><code>def pre_deviceid_auth(model):\npass\ndef post_deviceid_auth(model, successed):\npass\n</code></pre> Name Return Description <code>get_user_id()</code> <code>string</code> Get authenticated user id. If user not authenticated, value will be empty. <code>get_session_id()</code> <code>string</code> Get authenticated session id. If user not authenticated, value will be empty. <code>get_id()</code> <code>string</code> Get device id. <code>set_id(string)</code> Set device id."},{"location":"python/auth/#auth-via-custom-id","title":"Auth via custom id","text":"CodeModel details <pre><code>def pre_customid_auth(model):\npass\ndef post_customid_auth(model, successed):\npass\n</code></pre> Name Return Description <code>get_user_id()</code> <code>string</code> Get authenticated user id. If user not authenticated, value will be empty. <code>get_session_id()</code> <code>string</code> Get authenticated session id. If user not authenticated, value will be empty. <code>get_id()</code> <code>string</code> Get custom id. <code>set_id(string)</code> Set custom id."},{"location":"python/auth/#logout","title":"Logout","text":"CodeModel details <pre><code>def pre_logout(model):\npass\ndef post_logout(model, successed):\npass\n</code></pre> Name Return Description <code>get_user_id()</code> <code>string</code> Get authenticated user id. If user not authenticated, value will be empty. <code>get_session_id()</code> <code>string</code> Get authenticated session id. If user not authenticated, value will be empty."},{"location":"python/auth/#restore-token","title":"Restore token","text":"CodeModel details <pre><code>def pre_restore_token(model):\npass\ndef post_restore_token(model, successed):\npass\n</code></pre> Name Return Description <code>get_user_id()</code> <code>string</code> Get authenticated user id. If user not authenticated, value will be empty. <code>get_session_id()</code> <code>string</code> Get authenticated session id. If user not authenticated, value will be empty. <code>get_token()</code> <code>string</code> Get token. <code>set_token()</code> Set token."},{"location":"python/auth/#refresh-token","title":"Refresh token","text":"CodeModel details <pre><code>def pre_refresh_token(model):\npass\ndef post_refresh_token(model, successed):\npass\n</code></pre> Name Return Description <code>get_user_id()</code> <code>string</code> Get authenticated user id. If user not authenticated, value will be empty. <code>get_session_id()</code> <code>string</code> Get authenticated session id. If user not authenticated, value will be empty. <code>get_token()</code> <code>string</code> Get token. <code>set_token()</code> Set token."},{"location":"python/scripting/","title":"Python Scripting","text":"<p>Yummy has Python Programming Language support. You can control the flow via Python scripts and it is very easy to write. All Auth module can be controlled over Python and the system has default Python script to start modification. Yummy will have more robust Python support but for now, we have limited support. Also, all Python scripts are stateful, it means that if you change variable at runtime, it will change that variable for all other requests. </p> <p>Yummy scan all available Python files and import into the system. You should configure <code>DEFAULT_PYTHON_FILES_PATH</code> parameter to change default path. You should check <code>yummy-server/py/reference.py</code> files see all available API's.</p> <p>Also, there is example about how to use Python to control flow and logic. Please check a look at the <code>examples/tic-tac-toe</code> from the repository.</p>"},{"location":"python/scripting/#warning","title":"WARNING","text":"<p>There is a one critical issue can be impect your Python implementation.</p> <p>Never save/assign Model to Python list/dict/variable. That will impect Yummy stability and the system will CRASH at first request. But, nice thing is that you will get information about why it is crashed and clearly, you can read that problem at logs.</p> <p>Here is the one the example for DO NOT DO THIS.</p> <pre><code>messages = {}\ndef pre_email_auth(model):\nmessages.pre_auth = model\npass\ndef post_email_auth(model, successed):\nmessages.post_auth = model\npass\n</code></pre>"},{"location":"python/scripting/#execution-flow","title":"Execution flow","text":"<pre><code>sequenceDiagram\n    autonumber\n    Client-&gt;&gt;Server: Request\n    Server-&gt;&gt;pre_process: Pass model\n    activate pre_process\n    rect rgb(191, 223, 255)\n        pre_process-&gt;&gt;core_process: Pass model\n        deactivate pre_process\n        activate core_process\n        core_process-&gt;&gt;post_process: Pass model and status\n        deactivate core_process\n        activate post_process\n    end\n\n    pre_process--&gt;&gt;Server: Failed\n    core_process--&gt;&gt;Server: Failed\n    post_process--&gt;&gt;Server: Failed\n    post_process--&gt;&gt;Server: Successed\n    deactivate post_process\n    Server-&gt;&gt;Client: Response\n\n    Note over pre_process, post_process: Processing the received message\n\n    box Server\n        participant Server\n        participant pre_process\n        participant core_process\n        participant post_process\n    end</code></pre> <ol> <li>Client send message to Server.</li> <li>Server will pass received model to pre_process operation. That is the python function what we customized. We can update the model and updated model will be passed to core_process. This stage mostly used for validating model or updating it. Lets says, you dont want to use clients value and force to use your value, you can update model. Like, maximum size of the room. </li> <li>core_process receive the message from pre_process function and execute internal logics. The system can send message to some other clients.</li> <li>When core_process finish internal execution, the system call post_process python function. But, in this case, the system pass two parameter instead of one. First argument is model, seconds argument is core_process status. If the some information is missing or there is a issue, second argument will be False. But, if everything is normal and as expected, parameter will be True. This stage mostly used to finilize checks or logics. Like, if the client send a message to room and we want to update room metadata, we should check the status variable and update room metadata.</li> <li>Flow can be stopped at pre_process stage. Maybe code is not valid or intentionally flow needs to be stopped. You can use fail() function to do that.</li> <li>Flow can be stopped at core_process stage.</li> <li>Flow can be stopped at post_process stage. Maybe code is not valid or intentionally flow needs to be stopped. You can use fail() function to do that.</li> <li>If the everything went well, the system response message(s) to Server.</li> <li>Server will send message to Client.</li> </ol>"},{"location":"python/scripting/#todos","title":"TODOS","text":"<ul> <li> Database access</li> <li> Stateless access</li> </ul>"},{"location":"python/user/","title":"User API's","text":""},{"location":"python/user/#get-user-information","title":"Get user information","text":"CodeModel details <pre><code>def pre_get_user_information(model):\npass\ndef post_get_user_information(model, successed):\npass\n</code></pre> Name Return Description <code>get_query()</code> <code>GetUserInformation</code> Get user information query"},{"location":"python/user/#getuserinformation","title":"GetUserInformation","text":"Name Return Description <code>get_type()</code> <code>string</code> Message type. Message types are: 'Me', 'User' and 'UserViaSystem'. <code>as_table()</code> <code>Table</code> Message type. Message types are: 'Me', 'User' and 'UserViaSystem'. <p><code>as_table()</code> return <code>Table</code> and <code>Table</code> contains following keys: type, user_id, session_id, requester_user_id, requester_session_id based on <code>get_type()</code> information.</p>"}]}