/* **************************************************************************************************************** */
/* **************************************************** MODS ****************************************************** */
/* *************************************************** IMPORTS **************************************************** */
/* **************************************************************************************************************** */
use database::DefaultDatabaseStore;
use lua::{UserIdWrapper, MetaTypeWrapper};
use mlua::prelude::*;
use model::meta::UserMetaAccess;

use crate::plugin::lua::LuaPlugin;
use crate::plugin::{PluginExecuter, YummyPluginContext};

/* **************************************************************************************************************** */
/* ******************************************** STATICS/CONSTS/TYPES ********************************************** */
/* **************************************************************************************************************** */
type YummyContext = YummyPluginContext<DefaultDatabaseStore>;

/* **************************************************************************************************************** */
/* **************************************************** MACROS **************************************************** */
/* *************************************************** STRUCTS **************************************************** */
/* **************************************************** ENUMS ***************************************************** */
/* ************************************************** FUNCTIONS *************************************************** */
/* **************************************************************************************************************** */
fn get_user_meta(lua: &Lua, (user_id, key): (UserIdWrapper, String)) -> LuaResult<Option<MetaTypeWrapper<UserMetaAccess>>> {
    let context = lua.app_data_ref::<YummyContext>().unwrap();
    let metas = context.get_user_meta(user_id.0, key).map_err(|err| LuaError::RuntimeError(err.to_string()))?;
    Ok(metas.map(|item| MetaTypeWrapper(item)))
}

/* **************************************************************************************************************** */
/* *************************************************** TRAITS ***************************************************** */
/* ************************************************* IMPLEMENTS *************************************************** */
/* **************************************************************************************************************** */
impl LuaPlugin {
    pub fn bind_context<'a>(&self, executer: &PluginExecuter) -> LuaResult<()> {
        let context: YummyContext = executer.context.clone();
        let globals = self.lua.globals();
        let user_context = self.lua.create_table()?;
        
        // Set context for future usage
        self.lua.set_app_data(context);
        
        user_context.set("get_user_meta",self.lua.create_function(get_user_meta)?)?;

        globals.set("user", user_context)?;

        Ok(())
    }
}
/* **************************************************************************************************************** */
/* ********************************************** TRAIT IMPLEMENTS ************************************************ */
/* ************************************************* MACROS CALL ************************************************** */
/* ************************************************** UNIT TESTS ************************************************** */
/* **************************************************************************************************************** */
